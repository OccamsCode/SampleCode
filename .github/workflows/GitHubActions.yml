name: iOS Build and Test

on:
  push:
    branches: 
    - main
    - develop
  pull_request:
    types:
      - opened
    branches:
      - main

jobs:
  build:
    name: Build and Test, any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - uses: actions/cache@v2
        with:
          path: /Users/runner/Library/Developer/Xcode/DerivedData/**/SourcePackages/checkouts 
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
          
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
    
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      
      - name: Check PR File Changes
        id: file_changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^..HEAD)
          NUM_FILES_CHANGED=$(echo "$CHANGED_FILES" | wc -l)
          echo "::set-output name=num_files_changed::$NUM_FILES_CHANGED"

      - name: Label PR based on File Changes
        id: label_pr
        run: |
          FILE_CHANGES=${{ steps.file_changes.outputs.num_files_changed }}
          if [[ $FILE_CHANGES -lt 5 ]]; then
            LABEL="size-xs"
          elif [[ $FILE_CHANGES -lt 10 ]]; then
            LABEL="size-s"
          elif [[ $FILE_CHANGES -lt 20 ]]; then
            LABEL="size-m"
          else
            LABEL="size-l"
          fi

          echo "::set-output name=label::$LABEL"

      - name: Add PR Label
        if: steps.label_pr.outputs.label != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');

            const octokit = context.octokit;
            await octokit.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [${{ steps.label_pr.outputs.label }}]
            });
